#include <algorithm>
#include <iostream>
using namespace std;

template <typename T, int S>
class array{
    T *p;
    int my_size;
    int upto;

    public:

    class iterator{
        public:
        iterator(T ptr) : my_ptr(ptr){

        }
        
        T operator*(){
            
            return my_ptr;
        }

        protected:
        T my_ptr;
    };

    array(){
        my_size = S;
        p = new T[S];
    }

    ~array(){
        delete[] p;
    }

    //ELEMENT ACCESS

    T& at(int index){
        return p[index];
    }

    T& operator[](int index){
        return p[index];
    }

    T& front(){
        return p[0];
    }

    T& back(){
        return p[my_size];
    }

    T* data(){
        return p;
    }

    //iterators
    iterator begin(){
        return iterator(p[0]);
    }

    iterator end(){
        return iterator(p[my_size - 1]);
    }

    //CAPACITY
    bool empty(){
        return my_size==0;
    }

    int size(){
        return my_size;
    }

    int max_size(){
        return my_size;
    }

    //OPERATIONS
    void fill(const T& val){
        for(int i=0; i < my_size ; i++){
            p[i] = val;
        }
    }

    void swap(array<T,S> new_array){
        for(int i=0; i < my_size ; i++){
            T val = p[i];
            p[i] = new_array[i];
            new_array[i] = val;
        }
    }

    
};