#include <algorithm>
#include <iostream>
#include <initializer_list>
#include <iterator>
using namespace std;

template <typename T>
struct Node{
        T my_data;
        Node* next;
        Node* prev;
        Node() = default;
        constexpr explicit Node(T d) : my_data(d), next(nullptr), prev(nullptr) {}
        operator T(){
            return my_data;
        }
        operator T() const{
            return my_data;
        }
        Node operator++(){
            return next;
        }
        Node operator--(){
            return prev;
        }
    };

template <typename T>
class list{
    private:
        Node<T>* my_before;
        Node<T>* my_head;
        Node<T>* my_tail;
        Node<T>* my_after;
        size_t my_size;
    

    public:
        using value_type            = T;
        using size_type             = size_t;
        using reference             = T&; 
        using const_reference       = const T&;
        using pointer               = T*;
        using const_pointer         = const T;
        
        typedef iterator_base<Node<T>>            iterator;
        typedef const iterator_base<Node<T>>      const_iterator;

        typedef reverse_iterator_base<Node<T>>         reverse_iterator;
        typedef const reverse_iterator_base<Node<T>>   const_reverse_iterator;

    list(){
        Node<T>* a = new Node<T>();
        Node<T>* b = new Node<T>();
        a->next = b;
        b->prev = a;
        my_before = a;
        my_after = b;
        my_head = nullptr;
        my_tail = nullptr;
        my_size = 0;
    }
    // TODO: Destructor

    private:

    void fixup_pointers(){
        if(my_size == 0){
            my_before->next = my_after;
            my_after->prev = my_before;
            my_head = nullptr;
            my_tail = nullptr;
            return;
        }
        Node<T>* curr = my_before;
        my_head = curr->next;
        while(curr->next != my_after){
            curr = curr->next;
        }
        my_tail = curr;
    }

    public:

    // ELEMENT ACCESS

    reference front(){
        return my_head->my_data;
    }
    const_reference front() const{
        return my_head->my_data;
    }

    reference back(){
        return my_tail->my_data;
    }
    const_reference back() const{
        return my_tail->my_data;
    }

    // ITERATORS
    iterator begin() noexcept{
        return iterator(my_head);
    }
    const_iterator begin() const noexcept{
        return const_iterator(&my_head->my_data);
    }
    const_iterator cbegin() const noexcept{
        return const_iterator(my_head);
    }

    iterator end() noexcept{
        return iterator(my_after);
    }
    const_iterator end() const noexcept{
        return const_iterator(my_after);
    }
    const_iterator cend() const noexcept{
        return const_iterator(my_after);
    }

    reverse_iterator rbegin() noexcept{
        return reverse_iterator(my_tail);
    }
    const_reverse_iterator rbegin() const noexcept{
        return const_reverse_iterator(my_tail);
    }
    const_reverse_iterator crbegin() const noexcept{
        return const_reverse_iterator(my_tail);
    }

    reverse_iterator rend() noexcept{
        return reverse_iterator(my_before);
    }
    const_reverse_iterator rend() const noexcept{
        return const_reverse_iterator(my_before);
    }
    const_reverse_iterator crend() const noexcept{
        return const_reverse_iterator(my_before);
    }

    // CAPACITY
    bool empty() const noexcept{
        return my_size == 0;
    }

    size_type size() const noexcept{
        return my_size;
    }

    size_type max_size() const noexcept;

    // MODIFIERS
    void clear() noexcept{
        Node<T>* curr = my_head;
        while(curr != my_tail){
            delete curr->prev;
            curr = curr->next;
        }
        delete curr;
        my_head = new Node<T>();
        my_tail = new Node<T>();
        my_size = 0;
    }

    iterator insert( const_iterator pos, const T& value ){
        T val = value;
        Node<T> curr = *pos;
        Node<T>* temp = curr.prev;
        Node<T>* new_node = new Node<T>(val);
        temp->next = new_node;
        curr.prev = new_node;
        new_node->prev = temp;
        new_node->next = &curr;
        my_size++;
        fixup_pointers();
        return iterator(new_node);
    }
    iterator insert( const_iterator pos, T&& value ){
        T val = value;
        Node<T> curr = *pos;
        Node<T>* temp = curr.prev;
        Node<T>* new_node = new Node<T>(val);
        temp->next = new_node;
        curr.prev = new_node;
        new_node->prev = temp;
        new_node->next = &curr;
        my_size++;
        fixup_pointers();
        return iterator(new_node);
    }
    iterator insert( const_iterator pos, size_type count, const T& value ){
        if(count==0){
            return iterator(pos);
        }
        T val = value;
        Node<T> curr = *pos;
        Node<T>* temp = curr.prev;
        Node<T>* new_original_node = new Node<T>(val);
        temp->next = new_original_node;
        new_original_node->prev = temp;
        temp = new_original_node;
        my_size++;
        for(int i=1; i<count; i++){
            Node<T>* new_node = new Node<T>(val);
            temp->next = new_node;
            new_node->prev = temp;
            temp = new_node;
            my_size++;
        }
        temp->next = &curr;
        curr.prev = temp;
        fixup_pointers();
        return iterator(new_original_node);
    }
    template< class InputIt >
    iterator insert( const_iterator pos, InputIt first, InputIt last ){
        if(first == last){
            return iterator(pos);
        }
        Node<T> curr = *pos;
        Node<T>* temp = curr.prev;
        Node<T>* new_original_node = new Node<T>(*first);
        temp->next = new_original_node;
        new_original_node->prev = temp;
        temp = new_original_node;
        InputIt it = first;
        it++;
        my_size++;
        while(it != last){
            Node<T>* new_node = new Node<T>(*it);
            temp->next = new_node;
            new_node->prev = temp;
            temp = new_node;
            it++;
            my_size++;
        }
        Node<T>* new_node = new Node<T>(*it);
        temp->next = new_node;
        new_node->prev = temp;
        temp = new_node;
        temp->next = &curr;
        curr.prev = temp;
        my_size++;
        fixup_pointers();
        return iterator(new_original_node);
    }
    iterator insert( const_iterator pos, std::initializer_list<T> ilist ){
        size_t count = ilist.size();
        if(count == 0){
            return iterator(pos);
        }
        Node<T>* start = new Node<T>(ilist[0]);
        Node<T>* curr = start;
        for(int i=1; i<=count; i++){
            Node<T>* new_node = new Node<T>(ilist[i]);
            curr->next = new_node;
            new_node->prev = curr;
            curr = new_node;
        }
        Node<T>* p = *pos;
        p->prev->next = start;
        start->prev = p->prev;
        p->prev = curr;
        curr->next = p;
        my_size += count;
        fixup_pointers();
        return iterator(start);
    }

    template< class... Args >
    iterator emplace( const_iterator pos, Args&&... args );

    iterator erase( const_iterator pos ){
        Node<T> p = *pos;
        p.prev->next = p.next;
        p.next->prev = p.prev;
        Node<T>* ret = p.next;
        delete p;
        my_size--;
        return iterator(ret);
    }
    iterator erase( const_iterator first, const_iterator last ){
        Node<T> f = *first;
        Node<T> l = *last;
        Node<T>* a = f.prev;
        Node<T>* b = l.next;
        Node<T>* curr = a->next;
        while(curr != b){
            curr->prev->next = curr->next;
            curr->next->prev = curr->prev;
            Node<T>* tmp = curr;
            curr = curr->next;
            my_size--;
        }

        return iterator(b);
    }

    void push_back( const T& value ){
        Node<T>* new_node = new Node<T>(value);
        if(my_size == 0){
            new_node->prev = my_before;
            my_before->next = new_node;
            new_node->next = my_after;
            my_after->prev = new_node;
            my_head = new_node;
            my_tail = new_node;
            my_size++;
        }
        else{
            new_node->prev = my_tail;
            my_tail->next = new_node;
            new_node->next = my_after;
            my_after->prev = new_node;
            my_size++;
        }
    }
    void push_back( T&& value ){
        Node<T>* new_node = new Node<T>(value);
        if(my_size == 0){
            new_node->prev = my_before;
            my_before->next = new_node;
            new_node->next = my_after;
            my_after->prev = new_node;
            my_head = new_node;
            my_tail = new_node;
            my_size++;
        }
        else{
            new_node->prev = my_tail;
            my_tail->next = new_node;
            new_node->next = my_after;
            my_after->prev = new_node;
            my_size++;
        }
    }

    template< class... Args >
    void emplace_back( Args&&... args );

    void pop_back(){
        if(my_size == 0){
            return;
        }
        if(my_size == 1){
            my_before->next = my_after;
            my_after->prev = my_before;
            my_head = nullptr;
            my_tail= nullptr;
            my_size--;
            return;
        }
        Node<T>* back = my_tail;
        my_tail = back->prev;
        my_tail->next = my_after;
        my_after->prev = my_tail;
        delete back;
        my_size--;
    }

    void push_front( const T& value ){
        Node<T>* new_node = new Node<T>(value);
        if(my_size == 0){
            new_node->prev = my_before;
            my_before->next = new_node;
            new_node->next = my_after;
            my_after->prev = new_node;
            my_head = new_node;
            my_tail = new_node;
            my_size++;
        }
        else{
            new_node->next = my_head;
            new_node->prev = my_before;
            my_before->next = new_node;
            my_head->prev = new_node;
            my_head = new_node;
            my_size++;
        }
    }
    void push_front( T&& value ){
        Node<T>* new_node = new Node<T>(value);
        if(my_size == 0){
            new_node->prev = my_before;
            my_before->next = new_node;
            new_node->next = my_after;
            my_after->prev = new_node;
            my_head = new_node;
            my_tail = new_node;
            my_size++;
        }
        else{
            new_node->next = my_head;
            new_node->prev = my_before;
            my_before->next = new_node;
            my_head->prev = new_node;
            my_head = new_node;
            my_size++;
        }
    }

    template< class... Args >
    void emplace_front( Args&&... args );

    void pop_front(){
        if(my_size == 0){
            return;
        }
        if(my_size == 1){
            my_before->next = my_after;
            my_after->prev = my_before;
            my_head = nullptr;
            my_tail = nullptr;
            my_size--;
            return;
        }
        Node<T>* front = my_head;
        my_head = front->next;
        my_head->prev = my_before;
        my_before->next = my_head;
        delete front;
        my_size--;
    }

    void resize( size_type count ){
        if(count == my_size){
            return;
        }
        if(count < my_size){
            while(my_size > count){
                pop_back();
            }
        }
        else if(count > my_size){
            size_t diff = count - my_size;
            for(int i=0; i<diff; i++){
                if(my_size == 0){
                    Node<T>* new_node = new Node<T>();
                    new_node->prev = my_before;
                    my_before->next = new_node;
                    new_node->next = my_after;
                    my_after->prev = new_node;
                    my_head = new_node;
                    my_tail = new_node;
                    my_size++; 
                }
                else{
                    Node<T>* new_node = new Node<T>();
                    new_node->prev = my_tail;
                    new_node->next = my_after;
                    my_after->prev = new_node;
                    my_tail->next = new_node;
                    my_tail = new_node;
                    my_size++;
                }
            }
        }
    }
    void resize( size_type count, const T& value ){
        if(count == my_size){
            return;
        }
        if(count < my_size){
            while(my_size > count){
                pop_back();
            }
        }
        else if(count > my_size){
            size_t diff = count - my_size;
            for(int i=0; i<diff; i++){
                if(my_size == 0){
                    Node<T>* new_node = new Node<T>(value);
                    new_node->prev = my_before;
                    my_before->next = new_node;
                    new_node->next = my_after;
                    my_after->prev = new_node;
                    my_head = new_node;
                    my_tail = new_node;
                    my_size++; 
                }
                else{
                    Node<T>* new_node = new Node<T>(value);
                    new_node->prev = my_tail;
                    new_node->next = my_after;
                    my_after->prev = new_node;
                    my_tail->next = new_node;
                    my_tail = new_node;
                    my_size++;
                }
            }
        }
    }

    void swap( list& other ){
        list temp = *this;
        *this = other;
        other = temp;
    }


};