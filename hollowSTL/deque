#include <algorithm>
#include <iostream>
#include <initializer_list>
#include <iterator>
using namespace std;

template <typename T>
class deque{
    private:
        size_t my_size;
        size_t my_used;
        size_t my_front;
        size_t my_back;
        T* *p;

    public:
        using value_type            = T;
        using size_type             = size_t;
        //todo difference type
        using reference             = T&; 
        using const_reference       = const T&;
        using pointer               = T*;
        using const_pointer         = const T;
        
        typedef iterator_base<T>            iterator;
        typedef const iterator_base<T>      const_iterator;

        typedef reverse_iterator_base<T>         reverse_iterator;
        typedef const reverse_iterator_base<T>   const_reverse_iterator;
        
    deque(){
        my_size = 10;
        p = new T*[10];
        my_front = -1;
        my_back = -1;
        my_used = 0;
    }

    explicit deque( size_type count ){
        my_size = count;
        p = new T*[my_size];
        my_front = -1;
        my_back = -1;
        my_used = 0;
    }

    ~deque();

    private:

    void fixup(){
        T* *q = new T*[my_size];
        for(int i=0; i<my_size;i++){
            q[i] = p[(my_front+i)%my_size];
        }
        p = q;
        my_front = 0;
        my_back = my_size - 1;
    }
    bool has_space(){
        return my_used + 2 < my_size;
    }
    bool has_space(size_type i){
        return my_used + 2 + i <= my_size;
    }
    void increase_size(int extra = 10){
        T* *q = new T[my_size+extra];
        for(int i=0;i<my_used;i++){
            q[i+1] = p[(my_front+1)%my_size];
        }
        p = q;
        my_size=my_size+extra;
        my_front = 1;
        my_back = my_used;
    }
    public:

    // Element Access
    reference       at( size_type pos ){
        return *p[(my_front+pos)%my_size];
    }
    const_reference at( size_type pos ) const{
        return *p[(my_front+pos)%my_size];
    }

    reference       operator[]( size_type pos ){
        return *p[(my_front+pos)%my_size];
    }
    const_reference operator[]( size_type pos ) const{
        return *p[(my_front+pos)%my_size];
    }
    
    reference front(){
        return *p[my_front];
    }
    const_reference front() const{
        return *p[my_front];
    }

    reference back(){
        return *p[my_back];
    }
    const_reference back() const{
        return *p[my_back];
    }


    // Iterators
    iterator begin() noexcept{
        return iterator(&front());
    }
    const_iterator begin() const noexcept{
        return const_iterator(&front());
    }
    const_iterator cbegin() const noexcept{
        return const_iterator(&front());
    }

    iterator end() noexcept{
        return iterator(&*p[(my_back+1)%my_size]);
    }
    const_iterator end() const noexcept{
        return const_iterator(&*p[(my_back+1)%my_size]);
    }
    const_iterator cend() const noexcept{
        return const_iterator(&*p[(my_back+1)%my_size]);
    }

    reverse_iterator rbegin() noexcept{
        return reverse_iterator(&*p[my_back]);

    }
    const_reverse_iterator rbegin() const noexcept{
        return const_reverse_iterator(&*p[my_back]);
    }
    const_reverse_iterator crbegin() const noexcept{
        return const_reverse_iterator(&*p[my_back]);
    }   
    // TODO: Fix these so it wraps around to the other side if needed
    reverse_iterator rend() noexcept{
        return reverse_iterator(&*p[my_front - 1]);
    }
    const_reverse_iterator rend() const noexcept{
        return const_reverse_iterator(&*p[my_front - 1]);
    }
    const_reverse_iterator crend() const noexcept{
        return const_reverse_iterator(&*p[my_front - 1]);
    }

    // Capacity
    bool empty() const noexcept{
        return my_used == 0;
    }

    size_type size() const noexcept{
        return my_used;
    }
    //             ++ Max Size Ommited ++

    void shrink_to_fit(){
        T* *q = new T[my_used + 2];
        for(int i=0; i < my_used; i++){
            q[i+1] = p[(my_front+i)%my_size];
        }
        p = q;
        my_size = my_used + 2;
        my_front = 1;
        my_back = my_used;
    }

    // Modifiers
    void clear() noexcept{
        my_size = 10;
        delete[] p;
        p = new T*[10];
        my_front = -1;
        my_back = -1;
        my_used = 0;
    }
    // TODO: Fix this up so the the 0th element is left empty for rend()
    // Maybe just fixup like the count insert
    iterator insert( const_iterator pos, const T& value ){
        if (pos == begin()){
            if(has_space()){
                size_t temp = my_front == 0 ? my_size-1 : my_front-1;
                p[temp] = value;
                my_front = temp;
                return begin();
            }
            else{
                increase_size();
                p[0] = value;
                my_front = 0;
                my_used++;
                return begin();
            }
        }
        else if (pos == end()){
            if(has_space()){
                p[(my_back+1)%my_size] = value;
                my_back = (my_back+1)%my_size;
                return iterator(&*p[my_back]);
            }
            else{
                increase_size();
                p[my_back+1] = value;
                my_used++;
                my_back++;
                return return iterator(&*p[my_back]);
            }
        }
        return iterator(nullptr);
    }
    iterator insert( const_iterator pos, T&& value ){
        if (pos == begin()){
            if(has_space()){
                size_t temp = my_front == 0 ? my_size-1 : my_front-1;
                p[temp] = value;
                my_front = temp;
                return begin();
            }
            else{
                increase_size();
                p[0] = value;
                my_front = 0;
                my_used++;
                return begin();
            }
        }
        else if (pos == end()){
            if(has_space()){
                p[(my_back+1)%my_size] = value;
                my_back = (my_back+1)%my_size;
                return iterator(&*p[my_back]);
            }
            else{
                increase_size();
                p[my_back+1] = value;
                my_used++;
                my_back++;
                return return iterator(&*p[my_back]);
            }
        }
        return iterator(nullptr);
    }
    // TODO: return iterator(pos) for count==0 at the very start
    // TODO: return iterator to first element inserted when pos == end()
    iterator insert( const_iterator pos, size_type count, const T& value ){
        //make sure deque has enough space to fit the extra elements
        if(!has_space(count)){
            size_t needs = count - (my_size - my_used - 2);
            increase_size(needs);
        }
        if(pos == begin()){
            for(int i=0; i<count; i++){
                size_t curr = my_front - 1 < 0 ? my_size + (my_front - 1) : my_front - 1;
                p[curr] = value;
                my_front = curr;
                my_used++;
            }
            return begin();
        }
        else if (pos == end()){
            for(int i=0; i<count ;i++){
                size_t curr = (my_back + 1)%my_size;
                p[curr] = value;
                my_back = curr;
                my_used++;
            }
            
        }
    }
    // TODO: return iterator(pos) for first == last
    // TODO: return iterator to first element inserted when pos == end()
    template< class InputIt >
    iterator insert( const_iterator pos, InputIt first, InputIt last ){
        size_t temp_size = 10;
        T* *q = new T*[10]; 
        InputIt curr = first;
        size_t count = 0;
        while(curr != last){
            q[count] = curr*;
            count++;
            if(count == temp_size){
                T* *k = new T*[temp_size + 10];
                for(int i=0; i < temp_size; i++){
                    k[i] = q[i];
                }
                q = k;
                temp_size += 10;
            }
        }
        if(!has_space(count)){
            increase_size(count);
        }
        if(pos == begin()){
            T* *g = new T[my_size];
            for(int i=0; i<count; i++){
                g[i+1] = q[i];
            }
            for(int i=0; i<my_used; i++){
                g[count + i + 1] = p[(my_front+i)%my_size];
            }
            p = g;
            my_front = 1;
            my_back = my_used + count;
            my_used += count;
            return begin();
        }
        else if (pos == end()){
            for(int i=0; i<count; i++){
                my_back = (my_back+1)%my_size;
                p[my_back] = q[i];
                my_used++;
            } 
        }
    }
    iterator insert( const_iterator pos, std::initializer_list<T> ilist );



    // TODO: Fixup to same as cpp reference
    void push_back(T data){
        //empty
        if(my_front == -1){
            p[0] = &data;
            my_front = 0;
            my_back = 0;
            my_used = 1;
        }
        //not empty
        else{
            //No space
            if (my_used == my_size) {
                T* *q = new T*[my_size + 10];
                for(int i=0; i<my_size;i++){
                    q[i] = p[(my_front+i)%my_size];
                }
                p = q;
                p[my_size] = &data;
                my_front = 0;
                my_back = my_size;
                my_size = my_size+10; 
                my_used++;
            }
            //space
            else{
                my_used++;
                my_back = (my_back+1)%my_size;
                p[my_back]=&data;
            }
        }
    }

    


    
};