#include <algorithm>
#include <iostream>
#include <initializer_list>
#include <iterator>
using namespace std;

template <typename T>
class deque{
    private:
        size_t my_size;
        size_t my_used;
        size_t my_front;
        size_t my_back;
        T* *p;

    public:
        using value_type            = T;
        using size_type             = size_t;
        //todo difference type
        using reference             = T&; 
        using const_reference       = const T&;
        using pointer               = T*;
        using const_pointer         = const T;
        
        typedef iterator_base<T>            iterator;
        typedef const iterator_base<T>      const_iterator;

        typedef reverse_iterator_base<T>         reverse_iterator;
        typedef const reverse_iterator_base<T>   const_reverse_iterator;
        
    deque(){
        my_size = 10;
        p = new T*[10];
        my_front = -1;
        my_back = -1;
        my_used = 0;
    }

    ~deque();

    deque& operator=( deque&& other );

    //Element Access
    reference       at( size_type pos );
    const_reference at( size_type pos ) const;

    reference       operator[]( size_type pos );
    const_reference operator[]( size_type pos ) const;


    reference front(){
        return *p[my_front];
    }

    //iterators
    iterator begin(){
        //pointer q = &front();
        //iterator* b = new iterator(q);
        //return *b;
        return iterator(&front());
    }

    //Modifiers
    void push_back(T data){
        //empty
        if(my_front == -1){
            p[0] = &data;
            my_front = 0;
            my_back = 0;
            my_used = 1;
        }
        //not empty
        else{
            //No space
            if (my_used == my_size) {
                T* *q = new T*[my_size + 10];
                for(int i=0; i<my_size;i++){
                    q[i] = p[(my_front+i)%my_size];
                    p = q;
                    p[my_size] = &data;
                    my_front = 0;
                    my_back = my_size;
                    my_size = my_size+10; 
                    my_used++;
                }
            }
            //space
            else{
                my_used++;
                my_back = (my_back+1)%my_size;
                p[my_back]=&data;
            }
        }
    }
    


    
};