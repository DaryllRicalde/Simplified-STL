#include <algorithm>
#include <iostream>
#include <initializer_list>
#include <iterator>
#include <stdexcept>
using namespace std;

template <typename T, size_t S>
class array{
    private:
        size_t my_size;
        T* p;

    public:
        using value_type            = T;
        using size_type             = size_t;
        //todo difference type
        using reference             = T&; 
        using const_reference       = const T&;
        using pointer               = T*;
        using const_pointer         = const T;
        
        typedef iterator_base<T>            iterator;
        typedef const iterator_base<T>      const_iterator;

        typedef reverse_iterator_base<T>         reverse_iterator;
        typedef const reverse_iterator_base<T>   const_reverse_iterator;
        
    array(){
        my_size = S;
        p = new T[S];
    }
    array(initializer_list<T> i);

    void operator=(initializer_list<T> i);

    
    //ELEMENT ACCESS

    constexpr reference at( size_type pos ){
        return p[pos];
    }

    constexpr const_reference at( size_type pos ) const{
        return p[pos];
    }

    constexpr reference operator[]( size_type pos ){
        return p[pos];
    }

    constexpr const_reference operator[]( size_type pos ) const {
        return p[pos];
    }


    constexpr reference front(){
        return p[0];
    }

    constexpr const_reference front() const{
        return p[0];
    }

    constexpr reference back(){
        if(my_size == 0){
            throw invalid_argument("Empty Array");
        }
        return p[my_size-1];
    }

    constexpr const_reference back() const{
        return p[my_size-1];
    }

    constexpr T* data() noexcept{
        return p;
    }

    constexpr const T* data() const noexcept{
        return p;
    }
    // ITERATORS
    constexpr iterator begin() noexcept{
        return iterator(&p[0]);
    }

    constexpr const_iterator begin() const noexcept{
        return const_iterator(&p[0]);
    }

    constexpr const_iterator cbegin() const noexcept{
        return const_iterator(&p[0]);
    }

    constexpr iterator end() noexcept{
        return iterator(&p[my_size]);
    }
    constexpr const_iterator end() const noexcept{
        return const_iterator(&p[my_size]);
    }
    constexpr const_iterator cend() const noexcept{
        return const_iterator(&p[my_size]);
    }

    constexpr reverse_iterator rbegin() noexcept;
    constexpr const_reverse_iterator  rbegin() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;

    constexpr reverse_iterator rend() noexcept{
        T* q = new T[S+1];
        for (int i=0; i < my_size; i++){
            q[i] = p[my_size-1-i];
        }
        return reverse_iterator(&q[my_size+1]);
    }
    constexpr const_reverse_iterator rend() const noexcept{
        T* q = new T[S+1];
        for (int i=0; i < my_size; i++){
            q[i] = p[my_size-1-i];
        }
        return const_reverse_iterator(&q[my_size+1]);
    }

    constexpr const_reverse_iterator crend() const noexcept{
        T* q = new T[S+1];
        for (int i=0; i < my_size; i++){
            q[i] = p[my_size-1-i];
        }
        return const_reverse_iterator(&q[my_size+1]);
    }

    // CAPACITY
    constexpr bool empty() const noexcept{
        return my_size == 0;
    }

    constexpr size_type size() const noexcept{
        return my_size;
    }

    constexpr size_type max_size() const noexcept{
        return size();
    }

    // OPERATIONS
    constexpr void fill( const T& value ){
        for(int i=0; i<my_size ;i++){
            p[i] = value;
        }
    }
    // TODO: Change this 
    constexpr void swap( array& other ) noexcept{
        for(int i=0; i<my_size; i++){
            p[i] = other[i];
        }
    }

    
};